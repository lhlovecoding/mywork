#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("ws:server");
var http = require("http");
const { Server } = require("socket.io");
const session = require("express-session");
const MongoStore = require("connect-mongo")(session);
const sessionConfig = {
  secret: "your secret key",
  resave: false,
  saveUninitialized: true,
  store: new MongoStore({
    url: "mongodb://localhost:27017/session-store",
    collection: "sessions",
  }),
  cookie: { maxAge: 1000 * 60 * 60 },
};
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const httpServer = http.createServer(app);
const io = new Server(httpServer, {
  /* options */
});
const wrap = (middleware) => (socket, next) => {
  middleware(socket.request, {}, next);
};
io.use(wrap(session(sessionConfig)));
io.on("connection", (socket) => {
  // ...
  console.log("连接成功");
  console.log(socket.request.session, "session");
  socket.on("message", (msg) => {
    log(msg);
    log(socket.request.session.user.username, "session");
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */
httpServer.listen(port);
httpServer.on("error", onError);
httpServer.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
